_file_name: learner_response_attempts.yaml
always_filter_main_dttm: false
cache_timeout: null
columns:
- advanced_data_type: null
  column_name: Result
  description: null
  expression: "  CASE\r\n    WHEN success THEN 'Correct'\r\n    ELSE 'Incorrect'\r\
    \n  END"
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: null
  verbose_name: Result
- advanced_data_type: null
  column_name: problem_name_with_location
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Problem Location and Name
- advanced_data_type: null
  column_name: course_key
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: LowCardinality(String)
  verbose_name: Course Key
- advanced_data_type: null
  column_name: interaction_type
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: LowCardinality(String)
  verbose_name: Interaction Type
- advanced_data_type: null
  column_name: emission_time
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: true
  python_date_format: null
  type: Nullable(DateTime)
  verbose_name: Emission Time
- advanced_data_type: null
  column_name: course_order
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: Int32
  verbose_name: Course Order
- advanced_data_type: null
  column_name: actor_id
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Actor Id
- advanced_data_type: null
  column_name: course_name
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Course Name
- advanced_data_type: null
  column_name: course_run
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Course Run
- advanced_data_type: null
  column_name: problem_id
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Problem Id
- advanced_data_type: null
  column_name: problem_link
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Problem Link
- advanced_data_type: null
  column_name: problem_name
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Problem Name
- advanced_data_type: null
  column_name: org
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: LowCardinality(String)
  verbose_name: Org
- advanced_data_type: null
  column_name: attempts
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: Int16
  verbose_name: Attempts
- advanced_data_type: null
  column_name: graded
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: Bool
  verbose_name: Graded
- advanced_data_type: null
  column_name: success
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: Bool
  verbose_name: Success
- advanced_data_type: null
  column_name: responses
  description: null
  expression: ''
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Responses
- advanced_data_type: null
  column_name: email
  description: null
  expression: null
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Email
- advanced_data_type: null
  column_name: name
  description: null
  expression: null
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Name
- advanced_data_type: null
  column_name: username
  description: null
  expression: null
  extra: {}
  filterable: true
  groupby: true
  is_active: true
  is_dttm: false
  python_date_format: null
  type: String
  verbose_name: Username
database_uuid: 21174b6c-4d40-4958-8161-d6c3cf5e77b6
default_endpoint: null
description: null
extra: null
fetch_values_predicate: null
filter_select_enabled: true
main_dttm_col: emission_time
metrics:
- currency: null
  d3format: null
  description: null
  expression: "  ROUND(\r\n    (SUM(CASE WHEN not success THEN attempts ELSE 0 END))\
    \ /\r\n    SUM(attempts), 2\r\n  )"
  extra:
    warning_markdown: ''
  metric_name: incorrect_percent
  metric_type: null
  verbose_name: '% Incorrect'
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: "  ROUND(\r\n    (SUM(CASE WHEN success THEN attempts ELSE 0 END)) /\r\
    \n    SUM(attempts), 2\r\n  )"
  extra:
    warning_markdown: ''
  metric_name: correct_percent
  metric_type: null
  verbose_name: '% Correct'
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: SUM(CASE WHEN NOT success THEN attempts ELSE 0 END)
  extra:
    warning_markdown: ''
  metric_name: incorrect_attempts
  metric_type: null
  verbose_name: Incorrect Attempts
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: SUM(CASE WHEN success THEN attempts ELSE 0 END)
  extra:
    warning_markdown: ''
  metric_name: correct_attempts
  metric_type: null
  verbose_name: Correct Attempts
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: COUNT(DISTINCT actor_id)
  extra:
    warning_markdown: ''
  metric_name: number_of_learners
  metric_type: null
  verbose_name: Number of Learners who Attempted the Problem
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: 'quantile(0.5)(attempts) '
  extra:
    warning_markdown: ''
  metric_name: median_attemps
  metric_type: null
  verbose_name: Median Attempts
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: SUM(attempts)/COUNT(actor_id)
  extra:
    warning_markdown: ''
  metric_name: avg_attemps
  metric_type: null
  verbose_name: Avg Attempts
  warning_text: null
- currency: null
  d3format: null
  description: null
  expression: COUNT(*)
  extra:
    warning_markdown: ''
  metric_name: count
  metric_type: count
  verbose_name: COUNT(*)
  warning_text: null
normalize_columns: false
offset: 0
params: null
schema: reporting
sql: |
  -- select one record per (learner, problem, course, org) tuple
  -- contains either the first successful attempt
  -- or the most recent unsuccessful attempt
  -- find the timestamp of the earliest successful response
  -- this will be used to pick the xAPI event corresponding to that submission
  with
      successful_responses as (
          select
              org, course_key, problem_id, actor_id::String as actor_id, first_success_at
          from reporting.dim_learner_response_attempt
          where
              isNotNull(first_success_at)
              {% if filter_values("org") != [] %}
      and org in {{ filter_values("org") | where_in }}
  {% endif %}

  {% if filter_values("course_name") != [] %}
      and course_key in (
          select course_key
          from event_sink.dim_course_names
          where course_name in {{ filter_values("course_name") | where_in }}
      )
  {% endif %}

  {% if filter_values("tag") != [] %}
      and course_key in (
          select course_key
          from
              reporting.dim_most_recent_course_tags
          where
              tag in (select replaceAll(arrayJoin({{ filter_values("tag") }}), '- ', ''))
      )
  {% endif %}
      ),
      -- for all learners who did not submit a successful response,
      -- find the timestamp of the most recent unsuccessful response
      unsuccessful_responses as (
          select
              org,
              course_key,
              problem_id,
              actor_id::String as actor_id,
              max(last_attempt_at) as last_attempt_at
          from reporting.dim_learner_response_attempt
          where
              actor_id not in (select distinct actor_id from successful_responses)
              {% if filter_values("org") != [] %}
      and org in {{ filter_values("org") | where_in }}
  {% endif %}

  {% if filter_values("course_name") != [] %}
      and course_key in (
          select course_key
          from event_sink.dim_course_names
          where course_name in {{ filter_values("course_name") | where_in }}
      )
  {% endif %}

  {% if filter_values("tag") != [] %}
      and course_key in (
          select course_key
          from
              reporting.dim_most_recent_course_tags
          where
              tag in (select replaceAll(arrayJoin({{ filter_values("tag") }}), '- ', ''))
      )
  {% endif %}
          group by org, course_key, problem_id, actor_id
      ),
      -- combine result sets for successful and unsuccessful problem submissions
      responses as (
          select org, course_key, problem_id, actor_id, first_success_at as emission_time
          from successful_responses
          union all
          select org, course_key, problem_id, actor_id, last_attempt_at as emission_time
          from unsuccessful_responses
      ),
      full_responses as (
          select
              events.emission_time as emission_time,
              events.org as org,
              events.course_key as course_key,
              events.problem_id as problem_id,
              events.object_id as object_id,
              events.actor_id as actor_id,
              events.responses as responses,
              events.success as success,
              events.attempts as attempts,
              events.interaction_type as interaction_type
          from xapi.problem_events events
          join responses using (org, course_key, problem_id, actor_id, emission_time)
          where 1 = 1 {% if filter_values("org") != [] %}
      and org in {{ filter_values("org") | where_in }}
  {% endif %}

  {% if filter_values("course_name") != [] %}
      and course_key in (
          select course_key
          from event_sink.dim_course_names
          where course_name in {{ filter_values("course_name") | where_in }}
      )
  {% endif %}

  {% if filter_values("tag") != [] %}
      and course_key in (
          select course_key
          from
              reporting.dim_most_recent_course_tags
          where
              tag in (select replaceAll(arrayJoin({{ filter_values("tag") }}), '- ', ''))
      )
  {% endif %}
      )

  select
      full_responses.emission_time as emission_time,
      full_responses.org as org,
      full_responses.course_key as course_key,
      blocks.course_name as course_name,
      blocks.course_run as course_run,
      full_responses.problem_id as problem_id,
      blocks.block_name as problem_name,
      blocks.display_name_with_location as problem_name_with_location,
      blocks.course_order as course_order,
      concat(
          '<a href="',
          full_responses.object_id,
          '" target="_blank">',
          problem_name_with_location,
          '</a>'
      ) as problem_link,
      full_responses.actor_id as actor_id,
      full_responses.responses as responses,
      full_responses.success as success,
      full_responses.attempts as attempts,
      full_responses.interaction_type as interaction_type,
      blocks.graded as graded,
      users.username as username,
      users.email as email,
      users.name as name
  from full_responses
  join
      reporting.dim_course_blocks blocks
      on (
          full_responses.course_key = blocks.course_key
          and full_responses.problem_id = blocks.block_id
      )
  left outer join
      event_sink.user_pii users
      on (
          full_responses.actor_id like 'mailto:%'
          and SUBSTRING(full_responses.actor_id, 8) = users.email
      )
      or full_responses.actor_id = toString(users.external_user_id)

  where 1 = 1 {% if filter_values("org") != [] %}
      and org in {{ filter_values("org") | where_in }}
  {% endif %}

  {% if filter_values("course_name") != [] %}
      and course_key in (
          select course_key
          from event_sink.dim_course_names
          where course_name in {{ filter_values("course_name") | where_in }}
      )
  {% endif %}

  {% if filter_values("tag") != [] %}
      and course_key in (
          select course_key
          from
              reporting.dim_most_recent_course_tags
          where
              tag in (select replaceAll(arrayJoin({{ filter_values("tag") }}), '- ', ''))
      )
  {% endif %}
table_name: learner_response_attempts
template_params: null
uuid: c0c8b8a3-b18a-4c17-a69b-e6befea0159d
version: 1.0.0